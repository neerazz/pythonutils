import datetime
import json
import time

import requests

from tools.github.github_clinet import GitHubRepo
from tools.googlesheet.google_sheets_service import update_sheet_values


def string_to_list(stringList: str, *args):
    stringList = stringList.replace("[", "").replace("]", "")
    for input_char in args:
        stringList = stringList.replace(input_char, "")
    return stringList.split(",")


def make_api_call(repoName, branch):
    url = f"http://kube-xray-vulnerability-detection.service.intraiad1.consul.csnzoo.com/ui/githubXRAY"
    headers = {
        'Authorization': 'Bearer usedefaulttoken',
        'Content-Type': 'application/json'
    }
    payload = json.dumps({
        "owner": "shared",
        "repoName": repoName,
        "fromBranch": branch,
        "toBranch": "main",
        "cleanAfterProcess": True,
        "runAsync": False,
        "addPRCComment": False,
        "prNumber": "297"
    })
    before = datetime.datetime.now()
    try:
        response = requests.request("POST", url, headers=headers, data=payload)
        response_json = response.json()
    except:
        return 500, "Error Making the API call", None
    after = datetime.datetime.now()
    time_diff = after - before
    return response.status_code, response_json, time_diff.total_seconds()


def string_trim(input_str):
    return input_str.replace("\n", " ")


sheet_id = "1XoUXZ-aqkt2dMxl8PqA6Ey0JjwSHcRPT27wbvgt1o_U"
page_id = "CVE-2022-42889_scan_results!"


def add_to_sheet_for_build_tool(row_number, cell_value: GitHubRepo):
    insertRange = f"{page_id}A{row_number}:F{row_number}"
    values = cell_value.get_cell_values_for_build_tool()
    body = {
        "range": insertRange,
        "majorDimension": "ROWS",
        "values": [values]
    }
    update_sheet_values(sheet_id, insertRange, body)


def add_to_sheet(row_number, cell_value: GitHubRepo):
    insertRange = f"{page_id}A{row_number}:L{row_number}"
    values = cell_value.get_cell_values()
    body = {
        "range": insertRange,
        "majorDimension": "ROWS",
        "values": [values]
    }
    update_sheet_values(sheet_id, insertRange, body)


def update_repo_metadata(file_name, sleep_time: int = 1):
    counter = 2
    for line in open(file_name).readlines():
        repo = GitHubRepo()
        line_split = line.split("|")
        repo.name = line_split[0]
        repo.language = line_split[1]
        repo.default_branch = line_split[2]
        repo.files = string_to_list(line_split[3], "'", "\n", " ")
        print(f"Updated Repo {counter} : {repo.name} with {repo.get_cell_values_for_build_tool()}")
        add_to_sheet_for_build_tool(counter, repo)
        counter += 1
        time.sleep(sleep_time)


def scan_repo(read_File: str, write_file: str, buildTools: set, sleep_time: int = 60):
    counter = 2
    write_file = open(write_file, "w")
    for lin in open(read_File).readlines():
        repo = GitHubRepo()
        line_split = lin.split("|")
        if len(line_split) > 5:  # Ignore empty line in file.
            repo.name = line_split[0]
            repo.language = line_split[1]
            repo.default_branch = line_split[4]
            repo.files = string_to_list(line_split[5], "'", "\n", " ")
            repo.scanned = False
            repo.response_body = None
            repo.response_status = None
            repo.dependencies = None
            repo.vulnerabilities = None
            repo.time_in_secs = None
            repo.CVEs = set()
            if repo.buildTool() in buildTools:
                repo.scanned = True
                status_code, json_res, time_in_secs = make_api_call(repo.name, repo.default_branch)
                repo.response_body = json_res
                if "dependencies" in json_res:
                    repo.dependencies = json_res["dependencies"]
                if "vulnerabilities" in json_res:
                    repo.vulnerabilities = json_res["vulnerabilities"]
                    if json_res["vulnerabilities"]:
                        for vul in json_res["vulnerabilities"]:
                            repo.CVEs.add(vul["cve"])
                repo.response_status = status_code
                repo.time_in_secs = time_in_secs
                add_to_sheet(counter, repo)
                counter += 1
                print(f"Sleeping for : {sleep_time} seconds.")
                time.sleep(sleep_time)
                print(f"Processed Repo {counter} : {repo.name} "
                      f"with Status {repo.response_status} and Response: {repo.response_body}")
            write_file.write(str(repo))


file_name1 = "file.txt"
file_name2 = "file3.txt"

if __name__ == '__main__':
    print('This will extract all the github projects.')
    sleep_time = 1 * 60
    print(f"Sleeping for : {sleep_time} seconds.")
    # update_repo_metadata(file_name1)
    scan_repo(file_name1, file_name2, {"Gradle"}, sleep_time=2)
